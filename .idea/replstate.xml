<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459293108611">{:repl-history {:ide [], :local [&quot;factorial 5&quot; &quot;(factorial 5)&quot; &quot;(* 3 4)&quot; &quot;(defn factorial [n]\n  (reduce * (range 1 (inc n))))&quot; &quot;(factorial 4)&quot; &quot;(factorial 34)&quot; &quot;(factorial 13)&quot; &quot;(println \&quot;hello world\&quot;)&quot; &quot;(defn wisdom\n  [words]\n  (str words \&quot;, Daniel-san\&quot;))&quot; &quot;(wisdom \&quot;Always bathe on Fridays\&quot;)&quot; &quot;(defn year-end-evaluation\n  []\n  (if (&gt; (rand) 0.5)\n    \&quot;You get a raise!\&quot;\n    \&quot;Better luck next year!\&quot;))&quot; &quot;(year-end-evaluation )&quot; &quot;(def great-baby-name \&quot;Rosanthony\&quot;)&quot; &quot;(let [great-baby-name \&quot;Bloodthunder\&quot;]\n  great-baby-name)&quot; &quot;great-baby-name&quot; &quot;(defn sum\n  ➊   ([vals] (sum vals 0))\n  ([vals accumulating-total]\n    ➋      (if (empty? vals)\n             accumulating-total\n             (sum (rest vals) (+ (first vals) accumulating-total)))))&quot; &quot;(defn sum\n  ([vals] (sum vals 0))\n  ([vals accumulating-total]\n   (if (empty? vals)\n             accumulating-total\n             (sum (rest vals) (+ (first vals) accumulating-total)))))&quot; &quot;sum 3 4&quot; &quot;sum 4&quot; &quot;sum [2 3]&quot; &quot;(sum [3 4 4])&quot;], :remote []}}</component>
</project>